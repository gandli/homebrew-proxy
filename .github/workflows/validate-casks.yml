---
name: Validate Casks

"on":
  push:
    branches: [main]
    paths:
      - Casks/**
  pull_request:
    branches: [main]
    paths:
      - Casks/**
  workflow_dispatch: {}
  schedule:
    # 每周一早上 8 点运行一次完整验证
    - cron: 0 8 * * 1

env:
  HOMEBREW_NO_ANALYTICS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSECURE_REDIRECT: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  validate:
    name: Validate Cask Standards
    runs-on: macos-latest
    timeout-minutes: 30

    # 防止并发运行
    concurrency:
      group: validate-casks-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew/var/homebrew/locks
            /opt/homebrew/Library/Taps
          key: homebrew-${{ runner.os }}-${{ hashFiles('Casks/**') }}
          restore-keys: |
            homebrew-${{ runner.os }}-

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install dependencies
        run: |
          # 确保脚本有执行权限
          chmod +x .github/scripts/validate-casks.sh

      - name: Run Cask validation
        id: validate
        run: |
          echo "::group::Cask Validation Results"
          ./.github/scripts/validate-casks.sh
          echo "::endgroup::"
        continue-on-error: true

      - name: Check for changed Casks (PR only)
        if: github.event_name == 'pull_request'
        id: changed-casks
        run: |
          # 获取变更的 Cask 文件
          CHANGED_CASKS=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^Casks/.*\.rb$' || true)

          if [[ -n "$CHANGED_CASKS" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_CASKS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            echo "::group::Changed Cask Files"
            echo "$CHANGED_CASKS"
            echo "::endgroup::"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate changed Casks only (PR)
        if: github.event_name == 'pull_request' && steps.changed-casks.outputs.changed == 'true'
        run: |
          echo "::group::Validating Changed Casks"

          # 为每个变更的 Cask 运行详细验证
          while IFS= read -r cask_file; do
            if [[ -f "$cask_file" ]]; then
              echo "\n=== 详细验证: $cask_file ==="

              # 运行 brew audit
              if command -v brew >/dev/null 2>&1; then
                echo "Running brew audit for $cask_file..."
                brew audit --cask "$cask_file" || true
              fi

              # 检查语法
              echo "Checking Ruby syntax for $cask_file..."
              ruby -c "$cask_file" || true

              # 运行自定义验证
              echo "Running custom validation for $cask_file..."
              ./.github/scripts/validate-casks.sh "$cask_file" || true
            fi
          done <<< "${{ steps.changed-casks.outputs.files }}"

          echo "::endgroup::"

      - name: Generate validation summary
        if: always()
        run: |
          echo "::group::Validation Summary"

          if [[ "${{ steps.validate.outcome }}" == "success" ]]; then
            echo "✅ 所有 Cask 文件验证通过"
            echo "VALIDATION_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Cask 文件验证失败"
            echo "VALIDATION_STATUS=failure" >> $GITHUB_ENV
          fi

          # 统计信息
          TOTAL_CASKS=$(find Casks -name "*.rb" | wc -l | tr -d ' ')
          echo "📊 总 Cask 数量: $TOTAL_CASKS"

          # 检查 livecheck 覆盖率
          CASKS_WITH_LIVECHECK=$(grep -l "livecheck do" Casks/*.rb | wc -l | tr -d ' ')
          LIVECHECK_COVERAGE=$((CASKS_WITH_LIVECHECK * 100 / TOTAL_CASKS))
          echo "📈 Livecheck 覆盖率: ${LIVECHECK_COVERAGE}% ($CASKS_WITH_LIVECHECK/$TOTAL_CASKS)"

          # 检查多架构支持
          MULTI_ARCH_CASKS=$(grep -l "arch arm:" Casks/*.rb | wc -l | tr -d ' ')
          MULTI_ARCH_COVERAGE=$((MULTI_ARCH_CASKS * 100 / TOTAL_CASKS))
          echo "🏗️ 多架构支持: ${MULTI_ARCH_COVERAGE}% ($MULTI_ARCH_CASKS/$TOTAL_CASKS)"

          echo "::endgroup::"

      - name: Comment PR (if validation fails)
        if: github.event_name == 'pull_request' && env.VALIDATION_STATUS == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // 检查是否已有验证失败的评论
            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('❌ Cask 验证失败')
            );

            const body = `❌ **Cask 验证失败**

            您的 PR 中的 Cask 文件未通过标准化验证。请检查以下内容：

            - ✅ 确保所有必需字段都已填写
            - ✅ 添加 \`livecheck\` 配置（推荐使用 \`github_latest\` 策略）
            - ✅ 检查架构支持和命名规范
            - ✅ 确保 URL 使用 HTTPS
            - ✅ 运行 \`brew audit --cask <cask-file>\` 检查

            详细信息请查看 [验证日志](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})。

            📖 参考文档：[Cask 标准化指南](.github/CASK_STANDARDS.md)`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Comment PR (if validation succeeds)
        if: github.event_name == 'pull_request' && env.VALIDATION_STATUS == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // 删除之前的验证失败评论
            const failureComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('❌ Cask 验证失败')
            );

            if (failureComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: failureComment.id
              });
            }

            // 添加成功评论
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ **Cask 验证通过**\n\n您的 PR 中的所有 Cask 文件都符合项目标准化要求。感谢您的贡献！ 🎉`
            });

      - name: Fail job if validation failed
        if: env.VALIDATION_STATUS == 'failure'
        run: |
          echo "❌ Cask 验证失败，请修复上述问题后重新提交"
          exit 1
