---
name: Create Release

# 触发条件：手动触发或每月第一天自动触发
on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (留空则自动生成)'
        required: false
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false
  schedule:
    # 每月1号 UTC 时间 02:00 (北京时间 10:00) 自动创建 release
    - cron: '0 2 1 * *'

# 防止并发执行
concurrency:
  group: create-release
  cancel-in-progress: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于生成变更日志
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Generate version number
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            # 确保版本号以 v 开头
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
            fi
          else
            VERSION="v$(date +%Y.%m.%d)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 生成的版本号: $VERSION"
      
      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Release $VERSION 已存在"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Release $VERSION 不存在，可以创建"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract app information
        id: apps
        run: |
          echo "📦 提取应用程序信息..."
          
          # 创建应用信息表格
          APP_TABLE="| 应用名称 | 描述 | 版本 | 安装命令 | 主页 |\n|---------|------|------|----------|------|"
          APP_COUNT=0
          INSTALL_COMMANDS=""
          
          for cask_file in Casks/*.rb; do
            if [ -f "$cask_file" ]; then
              app_name=$(basename "$cask_file" .rb)
              version=$(grep -E '^\s*version\s+"' "$cask_file" | sed -E 's/.*version\s+"([^"]+)".*/\1/' | head -1)
              desc=$(grep -E '^\s*desc\s+"' "$cask_file" | sed -E 's/.*desc\s+"([^"]+)".*/\1/' | head -1)
              homepage=$(grep -E '^\s*homepage\s+"' "$cask_file" | sed -E 's/.*homepage\s+"([^"]+)".*/\1/' | head -1)
              
              APP_TABLE="$APP_TABLE\n| **$app_name** | $desc | \`$version\` | \`brew install gandli/proxy/$app_name\` | [🔗]($homepage) |"
              INSTALL_COMMANDS="$INSTALL_COMMANDS\nbrew install --cask $app_name"
              APP_COUNT=$((APP_COUNT + 1))
            fi
          done
          
          # 将多行内容保存到文件，避免 GitHub Actions 的多行输出问题
          echo -e "$APP_TABLE" > app_table.txt
          echo -e "$INSTALL_COMMANDS" > install_commands.txt
          
          echo "app_count=$APP_COUNT" >> $GITHUB_OUTPUT
          echo "✅ 提取了 $APP_COUNT 个应用程序的信息"
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          APP_COUNT="${{ steps.apps.outputs.app_count }}"
          
          cat > release_notes.md << 'EOF'
          # 🍺 Homebrew Proxy Tap Release $VERSION
          
          > 🚀 **精选 macOS 代理客户端集合** - 一键安装优质网络代理工具的 Homebrew Tap
          
          ## 📦 本次发布包含的应用程序
          
          EOF
          
          # 添加应用程序表格
          cat app_table.txt >> release_notes.md
          
          cat >> release_notes.md << 'EOF'
          
          ## 🚀 如何安装这些应用？
          
          ### 方法一：直接安装
          
          ```bash
          brew install gandli/proxy/<cask_name>
          ```
          
          ### 方法二：先添加 Tap，再安装
          
          ```bash
          brew tap gandli/proxy
          brew install --cask <cask_name>
          ```
          
          ### 方法三：使用 Brewfile
          
          在你的 `Brewfile` 中添加：
          
          ```ruby
          tap "gandli/proxy"
          cask "<cask_name>"
          ```
          
          然后运行：
          
          ```bash
          brew bundle
          ```
          
          ## 📈 更新内容
          
          - 📦 包含 $APP_COUNT 个精选代理应用程序
          - 🔄 所有应用程序版本已更新至最新
          - ✅ 所有 Cask 文件已通过测试验证
          - 🛡️ 确保所有下载链接和校验和的安全性
          
          ## 🔧 技术改进
          
          - 🤖 自动化 Cask 更新流程
          - 📊 改进的版本检测机制
          - 🔍 增强的错误处理和日志记录
          - ⚡ 优化的构建和发布流程
          
          ## 🤝 贡献
          
          感谢所有为本项目做出贡献的开发者！欢迎提交 Pull Request 来添加新的应用程序或改进现有的 Cask 文件。
          
          ## 📞 支持
          
          如果您在使用过程中遇到任何问题，请：
          
          1. 查看 [README.md](README.md) 中的文档
          2. 在 [Issues](https://github.com/gandli/homebrew-proxy/issues) 中搜索相关问题
          3. 如果问题未解决，请创建新的 Issue
          
          ---
          
          **安装命令快速参考：**
          
          ```bash
          # 添加 Tap
          brew tap gandli/proxy
          
          # 安装所有应用（可选）
          EOF
          
          # 添加安装命令
          cat install_commands.txt >> release_notes.md
          
          echo '```' >> release_notes.md
          
          # 替换变量
          sed -i "s/\$VERSION/$VERSION/g" release_notes.md
          sed -i "s/\$APP_COUNT/$APP_COUNT/g" release_notes.md
          
          echo "✅ 发布说明已生成"
          
          # 显示发布说明预览
          echo "📋 发布说明预览:"
          echo "----------------------------------------"
          head -20 release_notes.md
          echo "..."
          echo "----------------------------------------"
      
      - name: Create release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PRERELEASE="${{ github.event.inputs.prerelease || 'false' }}"
          
          echo "🚀 创建 GitHub Release: $VERSION"
          
          # 创建 release
          RELEASE_ARGS="--title \"🍺 Homebrew Proxy Tap $VERSION\" --notes-file release_notes.md"
          
          if [ "$PRERELEASE" = "true" ]; then
            RELEASE_ARGS="$RELEASE_ARGS --prerelease"
            echo "📋 创建预发布版本"
          else
            RELEASE_ARGS="$RELEASE_ARGS --latest"
            echo "📋 创建正式发布版本"
          fi
          
          eval "gh release create \"$VERSION\" $RELEASE_ARGS"
          
          echo "✅ Release $VERSION 创建成功！"
          echo "🔗 查看地址: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Skip release creation
        if: steps.check_release.outputs.exists == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "⏭️  跳过创建 Release，因为 $VERSION 已存在"
          echo "🔗 现有 Release 地址: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
      
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 清理临时文件..."
          rm -f app_table.txt install_commands.txt release_notes.md
          echo "✅ 清理完成"
      
      - name: Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          APP_COUNT="${{ steps.apps.outputs.app_count }}"
          
          echo "## 📋 Release 创建摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **版本号**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **应用数量**: $APP_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **发布状态**: ${{ steps.check_release.outputs.exists == 'false' && '✅ 已创建' || '⏭️ 已跳过（已存在）' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **发布地址**: [查看 Release](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 快速安装" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'brew tap gandli/proxy' >> $GITHUB_STEP_SUMMARY
          echo 'brew install --cask <app_name>' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY